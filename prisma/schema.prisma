// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String         @id @default(uuid())
  clerkUserId  String         @unique //* Clerk user id
  email        String         @unique
  name         String?
  imageUrl     String?
  transactions Transactions[]
  accounts     Accounts[]
  budgets      Budgets[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("users")
}

model Accounts {
  id           String         @id @default(uuid())
  name         String
  type         AccountType
  balance      Decimal        @default(0)
  isDefault    Boolean        @default(false)
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transactions[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([userId])
  @@map("accounts")
}

enum AccountType {
  CHECKING
  SAVINGS
  // CREDIT
}

model Transactions {
  id                String              @id @default(uuid())
  type              TransactionType
  amount            Decimal
  description       String?
  date              DateTime
  category          String
  receiptUrl        String?
  isReccuring       Boolean             @default(false)
  reccuringId       ReccurringInterval? //only used if isReccuring is true
  nextReccuringDate DateTime? //only used if isReccuring is true
  lastProcessedDate DateTime? //only used if isReccuring is true
  status            TransactionStatus   @default(COMPLETED)
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId         String
  account           Accounts            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
  // DEPOSIT
  // WITHDRAWAL
  // TRANSFER
  // REIMBURSEMENT
  // BILL_PAYMENT
  // TRANSFER_OUT
}

enum TransactionStatus {
  COMPLETED
  PENDING
  CANCELLED
}

enum ReccurringInterval {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  YEARLY
}

model Budgets {
  id           String    @id @default(uuid())
  amount       Decimal
  lastAlertSms DateTime?
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId])
  @@map("budgets")
}
